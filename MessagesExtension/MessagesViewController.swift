//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Christopher Trott on 6/14/16.
//  Copyright Â© 2016 twocentstudios. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    @IBOutlet weak var messageStackView: UIStackView!
    @IBOutlet weak var buttonStackView: UIStackView!
    @IBOutlet weak var messageTextField: UITextField!
    @IBOutlet weak var correctedTextField: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        let viewState = ViewState.fromConversation(conversation)
        
        switch viewState {
        case .promptNew:
            messageTextField.text = nil
            correctedTextField.text = nil
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = false
        case .translationNew:
            messageTextField.text = nil
            correctedTextField.text = nil
            messageTextField.isEnabled = true
            correctedTextField.isEnabled = false
        case let .translationPart(question: q):
            messageTextField.text = q
            correctedTextField.text = nil
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = true
        case let .translationCompleteUnknown(question: q):
            messageTextField.text = q
            correctedTextField.text = "Don't know" // TODO: other UI
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = false
        case let .translationCompleteKnown(question: q, answer: a):
            messageTextField.text = q
            correctedTextField.text = a
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = false
        case .correctionNew:
            messageTextField.text = nil
            correctedTextField.text = nil
            messageTextField.isEnabled = true
            correctedTextField.isEnabled = false
        case let .correctionPart(question: q):
            messageTextField.text = q
            correctedTextField.text = nil
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = true
        case let .correctionCompleteCorrect(question: q):
            messageTextField.text = q
            correctedTextField.text = "Correct!" // TODO: other UI
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = false
        case let .correctionCompleteUnknown(question: q):
            messageTextField.text = q
            correctedTextField.text = "Don't know" // TODO: other UI
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = false
        case let .correctionCompleteIncorrect(question: q, answer: a):
            messageTextField.text = q
            correctedTextField.text = a
            messageTextField.isEnabled = false
            correctedTextField.isEnabled = false
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        switch presentationStyle {
        case .compact:
            messageStackView.isHidden = true
            buttonStackView.isHidden = false
        case .expanded:
            messageStackView.isHidden = false
            buttonStackView.isHidden = true
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
